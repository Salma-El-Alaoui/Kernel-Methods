###############
n_cells = 4, equalize=True, rgb=True. CV for gaussian kernel in both SVM and PCA.      

   C =  100 kernel param =  1 kernel param for PCA =  0.6 nb_components =  300 ---- score =  0.5446
        C =  100 kernel param =  1 kernel param for PCA =  0.8 nb_components =  300 ---- score =  0.5486
        C =  100 kernel param =  1 kernel param for PCA =  1.0 nb_components =  300 ---- score =  0.552
        C =  100 kernel param =  1 kernel param for PCA =  0.6 nb_components =  500 ---- score =  0.549
        C =  100 kernel param =  1 kernel param for PCA =  0.8 nb_components =  500 ---- score =  0.5522
        C =  100 kernel param =  1 kernel param for PCA =  1.0 nb_components =  500 ---- score =  0.5568
        C =  100 kernel param =  1 kernel param for PCA =  0.6 nb_components =  800 ---- score =  0.554
        C =  100 kernel param =  1 kernel param for PCA =  0.8 nb_components =  800 ---- score =  0.5552
        C =  100 kernel param =  1 kernel param for PCA =  1.0 nb_components =  800 ---- score =  0.5556
        C =  100 kernel param =  3 kernel param for PCA =  0.6 nb_components =  300 ---- score =  0.5688
        C =  100 kernel param =  3 kernel param for PCA =  0.8 nb_components =  300 ---- score =  0.5678
        C =  100 kernel param =  3 kernel param for PCA =  1.0 nb_components =  300 ---- score =  0.5676
        C =  100 kernel param =  3 kernel param for PCA =  0.6 nb_components =  500 ---- score =  0.5678
        C =  100 kernel param =  3 kernel param for PCA =  0.8 nb_components =  500 ---- score =  0.569
        C =  100 kernel param =  3 kernel param for PCA =  1.0 nb_components =  500 ---- score =  0.5722
        C =  100 kernel param =  3 kernel param for PCA =  0.6 nb_components =  800 ---- score =  0.5634
        C =  100 kernel param =  3 kernel param for PCA =  0.8 nb_components =  800 ---- score =  0.5624
        C =  100 kernel param =  3 kernel param for PCA =  1.0 nb_components =  800 ---- score =  0.559

        The best set of parameters is:  ('C', 100, 'kernel_param', 3, 'kernel_param_pca', 1.0, 'nb_components', 500)


TRYING TO REFINE A BIT… leads to same best parameters


        C =  100 kernel param =  2 kernel param for PCA =  1.0 nb_components =  400 ---- score =  0.565
        C =  100 kernel param =  2 kernel param for PCA =  1.0 nb_components =  500 ---- score =  0.5648
        C =  100 kernel param =  2 kernel param for PCA =  1.0 nb_components =  600 ---- score =  0.5674
        C =  100 kernel param =  3 kernel param for PCA =  1.0 nb_components =  400 ---- score =  0.5714
        C =  100 kernel param =  3 kernel param for PCA =  1.0 nb_components =  500 ---- score =  0.5722
        C =  100 kernel param =  3 kernel param for PCA =  1.0 nb_components =  600 ---- score =  0.5708
        C =  100 kernel param =  4 kernel param for PCA =  1.0 nb_components =  400 ---- score =  0.5688
        C =  100 kernel param =  4 kernel param for PCA =  1.0 nb_components =  500 ---- score =  0.5658
        C =  100 kernel param =  4 kernel param for PCA =  1.0 nb_components =  600 ---- score =  0.5602

        The best set of parameters is:  ('C', 100, 'kernel_param', 3, 'kernel_param_pca', 1.0, 'nb_components', 500)


##################


##################
Laplacian SVM - Train/Test
equalize = True
rob = True
n_cells_hog = 8

kpca = KernelPCA(kernel="rbf", fit_inverse_transform=True, gamma =0.7, n_components=800 )
clf = OneVsOneSVM(C=100, kernel=kernel, kernel_param=1)
Accuracy score on validation dataset:  0.548


##################
RBF SVM - Train/Test
equalize = True
rob = True
n_cells_hog = 4


SI ON APPREND PCA SUR TRAIN

kpca = KernelPCA(kernel = « rbf » , gamma = 1., n_components = 1000)
clf = OneVsOneSVM(C=100, kernel=kernel, kernel_param=3)
Accuracy score on validation dataset:  0.557


kpca = KernelPCA(kernel="linear", fit_inverse_transform=True, n_components=1500 )
clf = OneVsOneSVM(C=100, kernel=kernel, kernel_param=3)
Accuracy score on validation dataset:  0.539


kpca = KernelPCA(kernel=« rbf", gamma = 0.6, fit_inverse_transform=True, n_components=1000 )
clf = OneVsOneSVM(C=100, kernel=kernel, kernel_param=3)
Accuracy score on validation dataset:  0.559

kpca = KernelPCA(kernel=« rbf", gamma = 0.6, fit_inverse_transform=True, n_components=800 )
clf = OneVsOneSVM(C=100, kernel=kernel, kernel_param=3)
Accuracy score on validation dataset:  0.556

kpca = KernelPCA(kernel=« rbf", gamma = 0.7, fit_inverse_transform=True, n_components=800 )
clf = OneVsOneSVM(C=100, kernel=kernel, kernel_param=3)
Accuracy score on validation dataset:  0.556

kpca = KernelPCA(kernel=« rbf", gamma = 0.65, fit_inverse_transform=True, n_components=800 )
clf = OneVsOneSVM(C=100, kernel=kernel, kernel_param=3)
Accuracy score on validation dataset:  0.561

SI ON APPREND PCA SUR TRAIN ET TEST D UN COUP

kpca = KernelPCA(kernel = « rbf » , gamma = 0.1, n_components = 1000)
clf = OneVsOneSVM(C=100, kernel=kernel, kernel_param=3)
Accuracy score on validation dataset:  0.537

kpca = KernelPCA(kernel = « rbf » , gamma = 0.5, n_components = 1000)
clf = OneVsOneSVM(C=100, kernel=kernel, kernel_param=3)
Accuracy score on validation dataset:
0.553


##################
RBF - Crossval
equalize = True
rgb = False # whether or not to consider 3 different channels (if false, mean of 3 channels)
n_cells_hog = 4

kernel = rbf_kernel # or any other kernel from the kernels.py file
classifier = "one_vs_one"

        C =  100 kernel param =  1 ---- score =  0.4922
        C =  100 kernel param =  5 ---- score =  0.5384
        C =  100 kernel param =  10 ---- score =  0.5336
        C =  150 kernel param =  1 ---- score =  0.4924
        C =  150 kernel param =  5 ---- score =  0.5384
        C =  150 kernel param =  10 ---- score =  0.5336

#####################

RBF - gamma=3, C=100, one vs one

###
equalize = True
rgb = False # whether or not to consider 3 different channels (if false, mean of 3 channels)
n_cells_hog = 8

kernel = rbf_kernel # or any other kernel from the kernels.py file
classifier = "one_vs_one"

	>>> 0.528 (validation set)

###
equalize = False
rgb = False # whether or not to consider 3 different channels (if false, mean of 3 channels)
n_cells_hog = 8

kernel = rbf_kernel # or any other kernel from the kernels.py file
classifier = "one_vs_one"

	>>> 0.515 (validation set)  /!\  pas refait de grid search, donc les paramètres du kernel sont ceux qui marchent pour la version égalisée !

###
equalize = True
rgb = False # whether or not to consider 3 different channels (if false, mean of 3 channels)
n_cells_hog = 4

kernel = rbf_kernel # or any other kernel from the kernels.py file
classifier = "one_vs_one"


	>>> 0.498 (validation set)  /!\  pas refait de grid search,



